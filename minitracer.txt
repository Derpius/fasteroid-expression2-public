@name Minitracer
@inputs DS:wirelink
@outputs 
@persist X Y RES CPU LIGHT:entity TexCache:table Done VHolos HoloPositions:array HoloColors:array
@trigger 

#[                                       ]#
##    E2 Example: Minitracer             ##
##                                       ##
##    An easy-to-use raytracing base.    ##
##    Connect it to a digital screen.    ##
#[                                       ]#


if(first()){ # initialize on first tick
    
    #
    ##  --------------[CONFIGURATION VARIABLES]--------------
        RES = 256   # screen res
        CPU = 12500 # max cpu in us; avoid values >15k
        VHolos = 32 # number of visualizer holos
    ##  -----------------------------------------------------
    #
    
    CPU = CPU * 10^-6 # since cpuUsage() measures in seconds instead of us, this conversion is needed (and done ahead of time to save cpu/ops)
    VHolos = min(VHolos,RES) # any more and we won't use them all!

    runOnTick(1)
    

    holoCreate(0)
    holoMaterial(0,"lights/white")
    holoAng(0,entity():toWorld(ang(90,0,0)))
    holoModel(0,"models/hunter/misc/cone1x1.mdl")
    holoScale(0,vec(0.05,0.05,0.2))
    holoParent(0,entity())
    
    for(I=1,VHolos){
        holoCreate(I)
        holoModel(I,"hq_icosphere")
        holoMaterial(I,"lights/white")
    } 
    holoEntity(1):setTrails(16, 0, 0 , "trails/laser", vec(255), 255, 0, 0)     
    HoloPositions = array()
    # dumbass cheat function I stole
    function wirelink:initScreen(Resolution){
        This[1048574]=0 #Reset Screen and whatever was on it will be cleared.
        This[1048569]=2 #Set color mode to 3
        This[1048575]=1 #Apply changes
        This[1048572]=Resolution #Set new resolution on Y (Height)
        This[1048573]=Resolution #Set new resolution on X (Width)
    }
    
    ###############
    ## 
    #   Ranger:getTexturePos( )
    #     Gets a "texture space" position from the provided ranger and returns it.
    #
    #     This texture space position will be in the format of vec(0,Y,Z), where
    #     X and Y can be any positive or negative decimal number.
    #
    #     This should be used as a helper for reading pixels out of a texture system of your choice.
    #     Don't forget to round first.
    # 
    function vector ranger:getTexturePos(){
        local WorldPos = This:pos()
        local HitNormal = This:hitNormal()
        local Position_Rotated = vec() # e2 variable scopes are cringe
        if(!This:hitWorld()){
            local TraceEntity = This:entity()
            Up = This:entity():up() # by default, use this axis for quat magic
            if(abs(HitNormal:dot(Up))>0.999){ # oops, up axis won't work, lets use a different one
                Up = This:entity():right()
            }
            HitAngle = quat(HitNormal,Up):toAngle() # do quat magic
            Position_Rotated = (TraceEntity:pos()-WorldPos):rotate(HitAngle) # map it onto a prop
        }
        else{
            HitAngle = HitNormal:toAngle()
            Position_Rotated = WorldPos:rotate(HitAngle) # map it onto the world
        }
        Position_Augmented = Position_Rotated:setX(0) # flatten it
        return toWorld(Position_Augmented,-HitAngle,vec(0),ang(0)) # finalize
    }


    ###############
    ## 
    #   Ranger:getTextureColor( )
    #     Describes how to get a color from a trace; returns said color.
    #     Currently uses a placeholder algorithm.
    #
    #     This function should be re-written to your specifications when you implement textures.
    # 
    function vector ranger:getTextureColor(){
        
        if( This:hitSky() ){
            return vec(100,210,255)
        }
        else{
            local Length = 0
            local ColorID = 0
            Tex = This:hitTexture()      
            for(I=1,Tex:length()){
                ColorID = ColorID + toByte(Tex[I])
            }
            ColorID = ColorID*360/128
            
            local TexturePos = round( This:getTexturePos() * 0.01 ) # make the checkerboard squares bigger
            Modifier = (( TexturePos[2]+TexturePos[3] ) % 2) # add checkerboard pattern
            
            local Color = hsv2rgb( vec(ColorID,1,0.5+Modifier*0.2) )
            Color = Color + 40 * ( This:hitNormal():dot( vec(0.57735026918963,0.57735026918963,0.57735026918963) ) ) # add dot-product shading
            
            return Color # return end result
        }
        
    }
    
}   

VHolosUpdated = array()

if(changed(DS)){ DS:initScreen(RES) }

while( opcounter() < softQuota() & cpuUsage() < CPU & !Done ){ # while we aren't about to quota, raytrace
    
    X = X + 1 # increment x every iteration
    if( X > RES ){ # once X reaches RES, reset it and increment Y
        X = 1 
        Y = Y + 1
        if( Y > RES ){ # once Y reaches RES, reset it
            Y = 1
            Done = 1 # remove this to trace forever
            entity():soundPlay(1,1,"buttons/button14.wav")
        }
    }


    Trace_Direction = (vec(RES/2,X-RES/2,RES/2-Y)):rotate( entity():angles() ) # figure out what direction to cast the ranger
    holoAng(0,Trace_Direction:toAngle()+ang(90,0,0))

    Trace = rangerOffset( 65536, entity():pos(), Trace_Direction ) # cast the ranger
    
    Color = Trace:getTextureColor()
    
    # display what it sees in the world - keep the holos in the same x coordinate in pixel space
    VHolo = floor(VHolos*X/RES)+1
    
    # avoid spamming holopos here as it puts strain on gmod's net library
    HoloPositions[VHolo,vector] = Trace:position()
    HoloColors[VHolo,vector] = Color
    VHolosUpdated[VHolo,number] = 1

    DS[(RES-X)+(Y)*RES] = rgb2digi( clamp(Color,vec(0),vec(255)) ,2) # push the color to the screen, but clamp it first
    
}

# update visuals once we know exactly what we should be updating
for(I=1,VHolos){
    if(VHolosUpdated[I,number]){
        holoPos(I,HoloPositions[I,vector] )
        holoColor(I,HoloColors[I,vector])    
    }
}
