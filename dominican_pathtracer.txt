@name dominican pathtracer
# put together in about half an hour by yours truly
# hook it up to a digi screen and see MAGIC!
@inputs DS:wirelink
@outputs 
@persist X Y Z Res L:entity Render Samp Bounces Materials:table CurMat:string Passes DSColors:table DSColors2:table DSTextures:table Ready SunColor:vector Operation Do:string Donut:array
@trigger  
@model models/dav0r/camera.mdl

#include "asyncfiles"
#include "bmplib2"

if(first()){
    
    SunColor = vec(255,247,196) * 3
    
    Res = 54
    Samp = 2
    Bounces = 4
    Passes = 16
    
    bmpSetSize( Res, Res )
    
    Donut = array(
        vec2(-1,-1),
        vec2(-1,0),
        vec2(-1,1),
        vec2(0,-1),
        vec2(0,1),
        vec2(1,-1),
        vec2(1,0),
        vec2(1,1)
    )
    
    for(X=0,Res){
        DSTextures[X,array] = array()    
        DSColors[X,array] = array()    
        for(Y=1,Res){
            DSColors[X,array][Y,vector] = vec()  
        }
    }
    
    DSColors2 = DSColors:clone()
    
    function wirelink:initScreen(Resolution){
        This[1048574]=0 #Reset Screen and whatever was on it will be cleared.
        This[1048569]=2 #Set color mode to 3
        This[1048575]=1 #Apply changes
        This[1048572]=Resolution #Set new resolution on Y (Height)
        This[1048573]=Resolution #Set new resolution on X (Width)
        This["PixelG",number] = 999
    }   
    
    function vector clampImprovedA(Color:vector){
        
        if(Color[1] > 255 | Color[2] > 255 | Color[3] > 255 ){
            Color = Color / max(Color[1],Color[2],Color[3])
        }
        Color = clamp(Color,vec(0),vec(255))
        return Color
        
    }
    
    fileLoadASync("materials/bigcity.txt","ready")
    
    function ready(FileData:string, FileName:string){
        Materials = vonDecodeTable(FileData)
        entity():soundPlay(36,1,"buttons/combine_button1.wav")
        Ready = 1
    }
    
    
    function string cleanupTexture(Tex:string){
        #check if we even need to do this
        if(Tex:sub(1,3)=="map"){
            #flip that shit around
            Tex = Tex:reverse()
            #clip it at the third underscore
            local Point=0
            for(N=1,3){
                Point = Tex:find("_",Point+1)
            }
            Tex = Tex:sub(Point+1)
            return Tex:reverse()   
        }
        else{return Tex}
    }
    
    function vector string:mat2color(){
        
        local Mat = Materials[This,table]
        
        while( Mat["Reference",string]!="" ){
            Mat = Materials[Mat["Reference",string],table] # traverse up the family tree
        }

        return Mat["Color",vector]
        
    }
    
    
    function number vector:dotImproved(Vec:vector){
        return ( 0.5*clamp(Vec:dot(This),0,1) + 0.5 )
    }
    
    function vector cosineSphere(Divisor){
        return (randvec()-vec(0,0,Divisor))
    }

    function vector ranger:getColor(Depth,Normal:vector){
        

        CurMat = This:hitTexture()
        CurMat = cleanupTexture(CurMat)
        
        if(CurMat=="**studio**"){
            CurMat = This:entity():getMaterials():string(1)
        }
        
        Col = vec(0)
        
        if(!Depth){
            DSTextures[ X, array ][ Y, string ] = CurMat + This:hitNormal()
        }
        
        if(This:hitSky()){
            if(Depth){
                return SunColor
            }
            else{
                return vec(100,150,255)
            }
        }
        
        if(Depth<Bounces){

            Col = Col + CurMat:mat2color()*0.7
                
            Normal = cosineSphere(1):rotate(This:hitNormal():toAngle())
            Sample = rangerOffset(65536,This:position(),Normal)

            Col = Col*0.2 + Sample:getColor(Depth+1,Normal)*0.6

        }
        else{
            
            Sun = rangerOffset(99999,This:position()+This:hitNormal()*0.01,-L:forward())
            
            if(Sun:hitSky()){
                return Col + CurMat:mat2color()  #terminate the ray
            }                
            
        }
        
        return Col
        
    }
    
    propSpawnUndo(0)
    
    L=propSpawn("models/props_wasteland/light_spotlight01_lamp.mdl",entity():pos()+vec(0,0,50),0)
    L:propGravity(0)
    L:setAng( cosineSphere(1):toAngle() )
    
    runOnTick(1)
    holoCreate(1)   
    
    function pathtrace(){
        Fwd = vec(0.6,-X/Res+0.5,-Y/Res+0.5):rotate(entity():angles())
        
        rangerHitWater(1)
        R = rangerOffset(65536,entity():pos(),Fwd)
        holoPos(1,R:pos())
        Color = vec(0)
        for(I=1,Samp){
            Color = Color + R:getColor(0,Fwd)
        }
        Color = Color / Samp
        
        DSColors[ X, array ][ Y, vector ] = DSColors[ X, array ][ Y, vector ] + Color
        DS[X+(Y)*Res] = rgb2digi( clampImprovedA(DSColors[ X, array ][ Y, vector ] / (Z+1)) ,2)
    }
    
    function denoise(){
        
        local Mater = DSTextures[ X, array ][ Y, string ]
        local C = 1
        local NewColor = DSColors[ X, array ][ Y, vector ]
        
        for(O=1,8){
            Xo = Donut[O,vector2][1]
            Yo = Donut[O,vector2][2]
            if( DSTextures[ X+Xo, array ][ Y+Yo, string ] == Mater ){
                local Falloff = 1 / Donut[O,vector2]:length2()
                local NearColor = DSColors[ X+Xo, array ][ Y+Yo, vector ]
                if( NearColor != vec(0) ){
                    NewColor = NewColor + NearColor * Falloff
                    C = C + Falloff
                }
            }
        }
        
        NewColor = NewColor / C
        DSColors2[ X, array ][ Y, vector ] = NewColor
        Col = NewColor / (Z+1)
        bmpWritePixel(X+1,Y+1,round(Col))
        DS[X+(Y)*Res] = rgb2digi(Col ,2)
        
    }
    
    Do = "pathtrace"
    
}

if(Render & Ready){
    while( opcounter()<softQuota() & (cpuUsage()/timeQuota() < 0.15) ){
        Do()
        X = (X+1)%Res
        if(X==0){
            Y = (Y+1)%Res
            if(Y==0){
                if(!Operation){
                    Operation = 1
                    Do = "denoise"
                    print("denoising...")
                }
                else{
                    Z++
                    DSColors = DSColors2
                    soundPlay(3,1,"npc/dog/dog_idle2.wav")
                    if(Z > Passes){
                        Render = 0
                        print("Done!")
                        soundPlay(2,4,"npc/dog/dog_rollover_servos1.wav")
                        fileWrite(">e2shared/pathtracer/filetest.txt", bmpRender() )
                        break
                    }
                    print(Z + "/" + Passes)
                    Operation = 0
                    Do = "pathtrace"
                }
            }
        }
    }
}

if(changed(owner():lastSaidWhen())){
    
    S = owner():lastSaid():explode(" ")
    
    if(S[1,string] == "/render"){
        X=Y=0
        print("Starting Render...")
        entity():soundPlay(1,4,"npc/dog/dog_playfull1.wav")
        Render = 1
    }
    
    # used for adding stuff to the materials table

    
}

if(changed(DS)|first()){
    DS:initScreen(Res)
}

if(!L:isFrozen()){
    Vec = (entity():pos()+vec(0,0,50)-L:pos())
    L:applyForce(Vec*L:mass()-L:vel()*0.2*L:mass())
    L:applyAngForce(-L:angVel()*L:inertia():length())
}
