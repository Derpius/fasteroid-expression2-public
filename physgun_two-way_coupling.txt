@name F=MA Compliant Physgun
@inputs 
@outputs 
@persist BeamLength HeldEntity:entity HeldLocalPos:vector InitialGrabYaw InitialGrabAng:angle InitialGrabQuat:quaternion Holding PLAYER_MASS
@persist OwnerEyeAng:angle Attack1
@persist [Chip,Owner]:entity TickInterval
@model models/hunter/misc/sphere025x025.mdl

    ##############################
    #   F=MA Compliant Physgun   #
    #       by: Fasteroid        #
    ##############################

if( first() ){
    
    runOnTick(1)
    PLAYER_MASS = 150
    Chip = entity()
    Owner = owner()
    Chip:setAlpha(0)
    TickInterval = tickInterval()
    runOnKeys(Owner,1)
    
    function vector entity:pointVel(LocalPos:vector){
        local AngVel = This:angVelVector()
        return This:vel() + ( This:toWorldAxis( AngVel:normalized():cross(LocalPos) * AngVel:length() * _PI/180 ) )    
    }
    function entity:perfectAngForce(Ang:angle){
        local Torque = This:toLocalAxis(rotationVector(quat(Ang)/quat(This)))
        This:applyTorque((Torque*100-This:angVelVector()*10)*This:inertia()* (This:mass()/min(This:mass(),500)))
    }
    
}

if( keyClk() ){ # default wheel speed is 5
    Key = keyClkPressed()
    if( Key == "mouse_wheel_up" ){
        BeamLength = clamp( BeamLength + 5, 40, 4096 )
    }
    if( Key == "mouse_wheel_down" ){
        BeamLength = clamp( BeamLength - 5, 40, 4096 )  
    }
    exit()
}

if( Owner:weapon():type() == "weapon_physgun" ) {
    
    Chip:propNotSolid(Attack1)
    Attack1 = Owner:keyAttack1()
    Attack2 = Owner:keyAttack2()
    
    rangerFilter( array(Owner,Chip) )
    EyeTrace = rangerOffset( 8192, Owner:shootPos() + Owner:vel() * TickInterval * 1.5, Owner:eye() )
    
    
    ###  Detect entity holding / dropping
    ##
        if( changed( Attack2 ) & Attack2 ){
            if(Holding){
                HeldEntity:propFreeze(1)    
            }
            Holding = 0    
        }
        if( changed( Attack1 ) | !Holding ){
            if( Attack1 ){
                HeldEntity = EyeTrace:entity()
                if( HeldEntity:owner() == owner() ){
                    Holding = 1
                    HeldEntity:propFreeze(0)
                    HeldLocalPos = HeldEntity:toLocal( EyeTrace:pos() )
                    InitialGrabQuat = quat( Chip:angles() )
                    InitialGrabYaw  = Owner:angles()[2]
                    InitialGrabAng  = HeldEntity:angles()
                    BeamLength = EyeTrace:distance()
                }
            }
            else{
                Holding = 0    
            }
        }
    ##
    ###
    if( Holding ){
        BeamEndPos = HeldEntity:toWorld( HeldLocalPos )
    
        Force      = Owner:shootPos() + Owner:eye() * BeamLength - BeamEndPos # initial force
        Force     -= HeldEntity:pointVel( HeldLocalPos ) * 0.1
        Force     *= clamp(HeldEntity:mass(),0,1000) # amplify
        
        TargetAng = InitialGrabAng
        CursedQuatThing = quat( Chip:angles():rotateAroundAxis( vec(0,0,1), Owner:angles()[2] - InitialGrabYaw ) ) / InitialGrabQuat
        TargetAng = TargetAng:rotateAroundAxis( rotationAxis(CursedQuatThing), rotationAngle(CursedQuatThing) )
        
        HeldEntity:perfectAngForce( TargetAng )
        
        HeldEntity:applyOffsetForce( Force, BeamEndPos )    
        
        Owner:plyApplyForce( -Force / PLAYER_MASS - Owner:vel() * 0.0001 * clamp(HeldEntity:mass(),0,1000) )
        
    }
    elseif(Attack1){
        BeamEndPos = EyeTrace:pos()
    }
    else{
        BeamEndPos = Owner:shootPos() + Owner:vel() * TickInterval * 2
    }
    
    IsRotating = Holding & Owner:keyUse()
    Chip:propFreeze( !IsRotating )        
    
    if(IsRotating){
        InitialGrabYaw = Owner:angles()[2]
    }
    
    Chip:setPos( BeamEndPos )

}
