@name betterhololib
@persist BETTERHOLO_AVAILABLE:array BETTERHOLO_MAX
@model models/bull/gates/microcontroller1.mdl

#[                                        ]#
##    E2 Library: betterhololib           ##
##                                        ##
##    Manages hologram IDs for you.       ##
##    Call holoAlloc() to get started.    ##
##                                        ##
##    Now completely vanilla!             ##
#[                                        ]#

if( first() ){
    
    ### INTERNAL ##
    ## 
    #   nextHoloID()
    #     Returns the next available hologram ID for use.
    #
    function number nextHoloID(){
        if( BETTERHOLO_AVAILABLE:count() == 0 ){
            BETTERHOLO_MAX++
            return BETTERHOLO_MAX
        }
        else {
            return BETTERHOLO_AVAILABLE:popNumber()
        }
    }
    
    ###############
    ## 
    #   holoAlloc( Pos:vector = entity():pos() )
    #     Creates a new BetterHolo and returns its index.
    #     Optionally takes in a position to spawn the holo at.
    #
    function number holoAlloc(){
        local Next = nextHoloID()
        holoCreate(Next)
        return Next
    }
    function number holoAlloc(Pos:vector){
        local Next = nextHoloID()
        holoCreate(Next,Pos)
        return Next
    }
    
    ###############
    ## 
    #   <BetterHolo>:holoFree( )
    #     Deletes the BetterHolo it's called on and frees the index for use again.
    #
    function number:holoFree(){
        holoDelete(This)
        BETTERHOLO_AVAILABLE:pushNumber(This)
    }
    
    ### DEPRECATED ##
    ## 
    #   <BetterHolo>:destroy( )
    #     Old alias of holoFree, kept for backwards-compatibility
    #
    function number:destroy(){
        This:holoFree()
    }
    

    if(entity():model() == "models/bull/gates/microcontroller1.mdl"){
        selfDestruct()
        error("This is a library; #include it in something.")
    }
    
}
